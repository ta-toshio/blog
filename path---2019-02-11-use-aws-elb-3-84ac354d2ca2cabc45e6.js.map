{"version":3,"sources":["webpack:///path---2019-02-11-use-aws-elb-3-84ac354d2ca2cabc45e6.js","webpack:///./.cache/json/2019-02-11-use-aws-elb-3.json"],"names":["webpackJsonp","542","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,cAAAC,OAAA,cAA4CC,gBAAmBC,GAAA,mIAAAC,KAAA,ioJAAAC,aAAi1JL,MAAA,iBAAAM,KAAA,uBAAsDC,aAAgBC,KAAA,6BAAAC,UAAgDC,QAAUF,KAAA,8BAAoCH,aAAgBL,MAAA,mBAA0BW,MAAA","file":"path---2019-02-11-use-aws-elb-3-84ac354d2ca2cabc45e6.js","sourcesContent":["webpackJsonp([232010369604381],{\n\n/***/ 542:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Toshio Blog\",\"author\":\"Ta Toshio\"}},\"markdownRemark\":{\"id\":\"/Volumes/Transcend/Workspace/local/ta-toshio-blog/src/pages/2019-02-11-use-aws-elb-3/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>前回の続きです。</p>\\n<h4>方針</h4>\\n<ol start=\\\"0\\\">\\n<li>\\n<p>AMIの作成</p>\\n</li>\\n<li>\\n<p>ELBの作成</p>\\n</li>\\n<li>\\n<p>ターゲットグループの設定</p>\\n</li>\\n<li>\\n<p>Auto Scalingの設定</p>\\n<ul>\\n<li>起動設定</li>\\n<li>Auto Scalingグループ</li>\\n</ul>\\n</li>\\n</ol>\\n<p>どのようなルール（＝Auto Scalingグループ）でどのようなインスタンス（=起動設定）を増減するか。</p>\\n<p>Auto Scalingグループをターゲットグループに紐付かせることによって、どのロードバランシング対象の管理化でスケールアウト、スケールインしますか、という振る舞いになる。</p>\\n<p>Auto Scaling起動設定の作成</p>\\n<p>自分で作成したAMIを選択\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552599-35556500-2e24-11e9-9887-4b9b8b232713.png\\\"></p>\\n<p>名前だけ入力して次へ\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552600-35edfb80-2e24-11e9-87b5-0e3bcc5a3766.png\\\"></p>\\n<p>webサーバーのスケールアウト・インをするつもりなので、web用のセキュリティーグループを選択\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52553718-e01b5280-2e27-11e9-8991-37ea0902a0bb.png\\\"></p>\\n<p>作成後、「この起動設定を使用してAuto Scalingグループを作成する」ボタンを押下\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552603-35edfb80-2e24-11e9-8721-2ad9d2c361ce.png\\\"></p>\\n<p>Auto Scalingグループの作成\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552605-36869200-2e24-11e9-9f79-4d216b391865.png\\\"></p>\\n<p>サブネットにパブリックサブネットの1aゾーンと1cゾーンを選択した。</p>\\n<p>高度な詳細\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552606-36869200-2e24-11e9-8556-baf91b02159a.png\\\"></p>\\n<ul>\\n<li>ロードバランシングにチェック</li>\\n<li>ターゲットグループに、前回作成したターゲットグループを指定して、ロードバランサー管理下のインスタンスと認識させる</li>\\n<li>ヘルスチェックのタイプにELB</li>\\n</ul>\\n<p>Auto Scalingのルールを設定\\n今回は最低1個のインスタンスで、最大2個\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552607-36869200-2e24-11e9-84a7-798426341e6c.png\\\"></p>\\n<p>スケールアウトの設定</p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552608-371f2880-2e24-11e9-9a01-55c5b417ca9e.png\\\"></p>\\n<p>新しいアラームを追加を押下\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552609-371f2880-2e24-11e9-92c8-e589c82365fa.png\\\"></p>\\n<p>CPUが40%以上の使用率になったらインスタンス1個立ち上げる</p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552610-371f2880-2e24-11e9-81bc-8575ec2c548c.png\\\"></p>\\n<p>スケールインの設定\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552614-38505580-2e24-11e9-9c67-48883efd6386.png\\\"></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552613-371f2880-2e24-11e9-8c1c-e94603bd7a21.png\\\"></p>\\n<p>タグの設定\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552615-38505580-2e24-11e9-846c-0895dda609cc.png\\\"></p>\\n<p>ウィザードを進めて作成後、Auto Scalingのプロビジョニングが終わったタイミングのターゲットグループ一覧の画面にて\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552616-38e8ec00-2e24-11e9-8a6d-d5887dff91dc.png\\\"></p>\\n<p>登録済みターゲットにいま起動設定とAuto Scalingグループで設定したインスタンスが一個増えている</p>\\n<p>EC2一覧画面にて\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552617-38e8ec00-2e24-11e9-913b-1b6c050b3fc9.png\\\"></p>\\n<p>ここで想定外だったのは、Web-1aというインスタンスがすでにロードバランサが管理しているターゲットにいるので、Auto Scaling最低1個から最大2個のインスタンス数設定に当てはまるかと思ったら、そうではないですね。Auto Scalingから作成されたインスタンス数を最低1個から最大2個の範囲で管理するのですね。</p>\\n<p>ということでWeb-1aを外してしまう。</p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552618-38e8ec00-2e24-11e9-85d7-b4046b22bf92.png\\\"></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552619-38e8ec00-2e24-11e9-8752-d42472c7923b.png\\\"></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552620-39818280-2e24-11e9-8b44-3f502402dabc.png\\\"></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552621-3a1a1900-2e24-11e9-9172-d3988fe2f002.png\\\"></p>\\n<p>web-1aのステータスがdrainingに変わる。\\n(Auto Scalingにインスタンス数を管理してもらうので、この後web-1aは削除しました)</p>\\n<p><em>本当にスケールアウト・スケールインされるか確認</em></p>\\n<p>CPU使用率を故意にあげたあと、作成されているインスタンスが出てきたこと確認</p>\\n<p>ステータスがinitial\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552623-3ab2af80-2e24-11e9-9c91-86917f13d5a3.png\\\"></p>\\n<p>ステータスチェックが初期化しています\\n<img src=\\\"!%5B%5D(https://user-images.githubusercontent.com/37950257/52552622-3a1a1900-2e24-11e9-9ec0-8b6d1f704571.png)\\\"></p>\\n<p>インスタンス数と希望が2になっていること確認\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552625-3b4b4600-2e24-11e9-987c-229d7bfe747b.png\\\"></p>\\n<p>今度はCPU使用率を元に戻した場合の振る舞いを確認</p>\\n<p>ステータスがdrainingに変わり、\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552629-3d150980-2e24-11e9-8930-024ec41b2513.png\\\"></p>\\n<p>削除される動きになったこと確認\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552628-3c7c7300-2e24-11e9-9f4a-00d489537017.png\\\"></p>\\n<p>申し訳ないのですが、Apacheが動いていてブラウザから確認できる箇所は記事中では省いてしまったので、本当にロードバランシングされているか分かりにくい記事になってしまったと思います。</p>\\n<p>あと、インスタンスを全部削除したときの振る舞いも確認したら、Auto Scalingがインスタンス起動させたことも確認しました。\\nインスタンスは全てストップさせたかったので、Auto Scalingの動作を無効にする、ということをしたかったのですが、操作方法が分からなかったので、作成した起動設定とAuto Scalingグループのルールは削除しました。</p>\\n<p>以上になります。</p>\",\"frontmatter\":{\"title\":\"Use Aws Elb #3\",\"date\":\"February 11, 2019\"}}},\"pathContext\":{\"slug\":\"/2019-02-11-use-aws-elb-3/\",\"previous\":{\"fields\":{\"slug\":\"/2019-02-09-use-aws-elb-2/\"},\"frontmatter\":{\"title\":\"Use Aws Elb #2\"}},\"next\":false}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2019-02-11-use-aws-elb-3-84ac354d2ca2cabc45e6.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Toshio Blog\",\"author\":\"Ta Toshio\"}},\"markdownRemark\":{\"id\":\"/Volumes/Transcend/Workspace/local/ta-toshio-blog/src/pages/2019-02-11-use-aws-elb-3/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>前回の続きです。</p>\\n<h4>方針</h4>\\n<ol start=\\\"0\\\">\\n<li>\\n<p>AMIの作成</p>\\n</li>\\n<li>\\n<p>ELBの作成</p>\\n</li>\\n<li>\\n<p>ターゲットグループの設定</p>\\n</li>\\n<li>\\n<p>Auto Scalingの設定</p>\\n<ul>\\n<li>起動設定</li>\\n<li>Auto Scalingグループ</li>\\n</ul>\\n</li>\\n</ol>\\n<p>どのようなルール（＝Auto Scalingグループ）でどのようなインスタンス（=起動設定）を増減するか。</p>\\n<p>Auto Scalingグループをターゲットグループに紐付かせることによって、どのロードバランシング対象の管理化でスケールアウト、スケールインしますか、という振る舞いになる。</p>\\n<p>Auto Scaling起動設定の作成</p>\\n<p>自分で作成したAMIを選択\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552599-35556500-2e24-11e9-9887-4b9b8b232713.png\\\"></p>\\n<p>名前だけ入力して次へ\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552600-35edfb80-2e24-11e9-87b5-0e3bcc5a3766.png\\\"></p>\\n<p>webサーバーのスケールアウト・インをするつもりなので、web用のセキュリティーグループを選択\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52553718-e01b5280-2e27-11e9-8991-37ea0902a0bb.png\\\"></p>\\n<p>作成後、「この起動設定を使用してAuto Scalingグループを作成する」ボタンを押下\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552603-35edfb80-2e24-11e9-8721-2ad9d2c361ce.png\\\"></p>\\n<p>Auto Scalingグループの作成\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552605-36869200-2e24-11e9-9f79-4d216b391865.png\\\"></p>\\n<p>サブネットにパブリックサブネットの1aゾーンと1cゾーンを選択した。</p>\\n<p>高度な詳細\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552606-36869200-2e24-11e9-8556-baf91b02159a.png\\\"></p>\\n<ul>\\n<li>ロードバランシングにチェック</li>\\n<li>ターゲットグループに、前回作成したターゲットグループを指定して、ロードバランサー管理下のインスタンスと認識させる</li>\\n<li>ヘルスチェックのタイプにELB</li>\\n</ul>\\n<p>Auto Scalingのルールを設定\\n今回は最低1個のインスタンスで、最大2個\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552607-36869200-2e24-11e9-84a7-798426341e6c.png\\\"></p>\\n<p>スケールアウトの設定</p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552608-371f2880-2e24-11e9-9a01-55c5b417ca9e.png\\\"></p>\\n<p>新しいアラームを追加を押下\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552609-371f2880-2e24-11e9-92c8-e589c82365fa.png\\\"></p>\\n<p>CPUが40%以上の使用率になったらインスタンス1個立ち上げる</p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552610-371f2880-2e24-11e9-81bc-8575ec2c548c.png\\\"></p>\\n<p>スケールインの設定\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552614-38505580-2e24-11e9-9c67-48883efd6386.png\\\"></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552613-371f2880-2e24-11e9-8c1c-e94603bd7a21.png\\\"></p>\\n<p>タグの設定\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552615-38505580-2e24-11e9-846c-0895dda609cc.png\\\"></p>\\n<p>ウィザードを進めて作成後、Auto Scalingのプロビジョニングが終わったタイミングのターゲットグループ一覧の画面にて\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552616-38e8ec00-2e24-11e9-8a6d-d5887dff91dc.png\\\"></p>\\n<p>登録済みターゲットにいま起動設定とAuto Scalingグループで設定したインスタンスが一個増えている</p>\\n<p>EC2一覧画面にて\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552617-38e8ec00-2e24-11e9-913b-1b6c050b3fc9.png\\\"></p>\\n<p>ここで想定外だったのは、Web-1aというインスタンスがすでにロードバランサが管理しているターゲットにいるので、Auto Scaling最低1個から最大2個のインスタンス数設定に当てはまるかと思ったら、そうではないですね。Auto Scalingから作成されたインスタンス数を最低1個から最大2個の範囲で管理するのですね。</p>\\n<p>ということでWeb-1aを外してしまう。</p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552618-38e8ec00-2e24-11e9-85d7-b4046b22bf92.png\\\"></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552619-38e8ec00-2e24-11e9-8752-d42472c7923b.png\\\"></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552620-39818280-2e24-11e9-8b44-3f502402dabc.png\\\"></p>\\n<p><img src=\\\"https://user-images.githubusercontent.com/37950257/52552621-3a1a1900-2e24-11e9-9172-d3988fe2f002.png\\\"></p>\\n<p>web-1aのステータスがdrainingに変わる。\\n(Auto Scalingにインスタンス数を管理してもらうので、この後web-1aは削除しました)</p>\\n<p><em>本当にスケールアウト・スケールインされるか確認</em></p>\\n<p>CPU使用率を故意にあげたあと、作成されているインスタンスが出てきたこと確認</p>\\n<p>ステータスがinitial\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552623-3ab2af80-2e24-11e9-9c91-86917f13d5a3.png\\\"></p>\\n<p>ステータスチェックが初期化しています\\n<img src=\\\"!%5B%5D(https://user-images.githubusercontent.com/37950257/52552622-3a1a1900-2e24-11e9-9ec0-8b6d1f704571.png)\\\"></p>\\n<p>インスタンス数と希望が2になっていること確認\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552625-3b4b4600-2e24-11e9-987c-229d7bfe747b.png\\\"></p>\\n<p>今度はCPU使用率を元に戻した場合の振る舞いを確認</p>\\n<p>ステータスがdrainingに変わり、\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552629-3d150980-2e24-11e9-8930-024ec41b2513.png\\\"></p>\\n<p>削除される動きになったこと確認\\n<img src=\\\"https://user-images.githubusercontent.com/37950257/52552628-3c7c7300-2e24-11e9-9f4a-00d489537017.png\\\"></p>\\n<p>申し訳ないのですが、Apacheが動いていてブラウザから確認できる箇所は記事中では省いてしまったので、本当にロードバランシングされているか分かりにくい記事になってしまったと思います。</p>\\n<p>あと、インスタンスを全部削除したときの振る舞いも確認したら、Auto Scalingがインスタンス起動させたことも確認しました。\\nインスタンスは全てストップさせたかったので、Auto Scalingの動作を無効にする、ということをしたかったのですが、操作方法が分からなかったので、作成した起動設定とAuto Scalingグループのルールは削除しました。</p>\\n<p>以上になります。</p>\",\"frontmatter\":{\"title\":\"Use Aws Elb #3\",\"date\":\"February 11, 2019\"}}},\"pathContext\":{\"slug\":\"/2019-02-11-use-aws-elb-3/\",\"previous\":{\"fields\":{\"slug\":\"/2019-02-09-use-aws-elb-2/\"},\"frontmatter\":{\"title\":\"Use Aws Elb #2\"}},\"next\":false}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2019-02-11-use-aws-elb-3.json\n// module id = 542\n// module chunks = 232010369604381"],"sourceRoot":""}