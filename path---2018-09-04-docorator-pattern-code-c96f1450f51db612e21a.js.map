{"version":3,"sources":["webpack:///path---2018-09-04-docorator-pattern-code-c96f1450f51db612e21a.js","webpack:///./.cache/json/2018-09-04-docorator-pattern-code.json"],"names":["webpackJsonp","514","module","exports","data","site","siteMetadata","title","author","markdownRemark","id","html","frontmatter","date","pathContext","slug","previous","fields","next"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,cAAAC,OAAA,cAA4CC,gBAAmBC,GAAA,4IAAAC,KAAA,oyBAAAC,aAAu9BL,MAAA,yBAAAM,KAAA,wBAA+DC,aAAgBC,KAAA,sCAAAC,UAAyDC,QAAUF,KAAA,6BAAmCH,aAAgBL,MAAA,iBAAwBW,MAAA","file":"path---2018-09-04-docorator-pattern-code-c96f1450f51db612e21a.js","sourcesContent":["webpackJsonp([256014208786043],{\n\n/***/ 514:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Toshio Blog\",\"author\":\"Ta Toshio\"}},\"markdownRemark\":{\"id\":\"/Volumes/Transcend/Workspace/local/ta-toshio-blog/src/pages/2018-09-04-docorator-pattern-code/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><a href=\\\"/blog/2018-04-01-decorator-pattern/\\\" target=\\\"_blank\\\">前回の記事</a>、を読み直して、Decoratorパターンの復習をする。</p>\\n<h1>docoratorパターンとは</h1>\\n<p>自分の言葉で</p>\\n<p>あるクラスに機能を追加する方法として、継承で実現するのではなく、合成（委譲）で機能を実現する方法である。また動的に機能の追加をすることが可能である。</p>\\n<p>より詳しく</p>\\n<p><a href=\\\"http://zecl.hatenablog.com/entry/20070603/p1\\\">http://zecl.hatenablog.com/entry/20070603/p1</a></p>\\n<p>クラス図（<a href=\\\"https://ja.wikipedia.org/wiki/Decorator_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\\\" target=\\\"_blank\\\">wikipediaより</a>）</p>\\n<img src=\\\"https://upload.wikimedia.org/wikipedia/commons/e/e9/Decorator_UML_class_diagram.svg\\\" />\\n<p><code>gist:https://gist.github.com/ta-toshio/131d355af7660f0a2150d02d11e21afd#file-docorator-pattern-java-01-java</code></p>\\n<p><code>gist:weirdpattern/ce54fdb1e5621b5966e146026995b974#syntax.text</code></p>\",\"frontmatter\":{\"title\":\"Docorator Pattern Code\",\"date\":\"September 04, 2018\"}}},\"pathContext\":{\"slug\":\"/2018-09-04-docorator-pattern-code/\",\"previous\":{\"fields\":{\"slug\":\"/2018-09-03-semantic-web/\"},\"frontmatter\":{\"title\":\"Semantic Web\"}},\"next\":false}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---2018-09-04-docorator-pattern-code-c96f1450f51db612e21a.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Toshio Blog\",\"author\":\"Ta Toshio\"}},\"markdownRemark\":{\"id\":\"/Volumes/Transcend/Workspace/local/ta-toshio-blog/src/pages/2018-09-04-docorator-pattern-code/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p><a href=\\\"/blog/2018-04-01-decorator-pattern/\\\" target=\\\"_blank\\\">前回の記事</a>、を読み直して、Decoratorパターンの復習をする。</p>\\n<h1>docoratorパターンとは</h1>\\n<p>自分の言葉で</p>\\n<p>あるクラスに機能を追加する方法として、継承で実現するのではなく、合成（委譲）で機能を実現する方法である。また動的に機能の追加をすることが可能である。</p>\\n<p>より詳しく</p>\\n<p><a href=\\\"http://zecl.hatenablog.com/entry/20070603/p1\\\">http://zecl.hatenablog.com/entry/20070603/p1</a></p>\\n<p>クラス図（<a href=\\\"https://ja.wikipedia.org/wiki/Decorator_%E3%83%91%E3%82%BF%E3%83%BC%E3%83%B3\\\" target=\\\"_blank\\\">wikipediaより</a>）</p>\\n<img src=\\\"https://upload.wikimedia.org/wikipedia/commons/e/e9/Decorator_UML_class_diagram.svg\\\" />\\n<p><code>gist:https://gist.github.com/ta-toshio/131d355af7660f0a2150d02d11e21afd#file-docorator-pattern-java-01-java</code></p>\\n<p><code>gist:weirdpattern/ce54fdb1e5621b5966e146026995b974#syntax.text</code></p>\",\"frontmatter\":{\"title\":\"Docorator Pattern Code\",\"date\":\"September 04, 2018\"}}},\"pathContext\":{\"slug\":\"/2018-09-04-docorator-pattern-code/\",\"previous\":{\"fields\":{\"slug\":\"/2018-09-03-semantic-web/\"},\"frontmatter\":{\"title\":\"Semantic Web\"}},\"next\":false}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/2018-09-04-docorator-pattern-code.json\n// module id = 514\n// module chunks = 256014208786043"],"sourceRoot":""}